<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   applicationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<s:ChannelSet id="channelSet">
			<!-- RTMP channel -->
			<s:RTMPChannel id="rtmp" url="rtmp://tourdeflex.adobe.com:2037"/>
			<!-- Long Polling Channel -->
			<s:AMFChannel url="http://tourdeflex.adobe.com:8080/lcds-samples/messagebroker/amflongpolling"/>
			<!-- Regular polling channel -->
			<s:AMFChannel url="http://tourdeflex.adobe.com:8080/lcds-samples/messagebroker/amfpolling"/>
		</s:ChannelSet>
		
		<s:Consumer id="consumer" 
					channelSet="{channelSet}"
					destination="tdf.sampleviewingfeed" 
					subtopic="flex" 
					message="messageHandler(event)" 
					fault="Alert.show(event.faultString)"/>
	</fx:Declarations>

	
	<fx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.messaging.events.MessageEvent;
		import mx.controls.Alert;
		
		[Bindable]
		private var feedItems:ArrayCollection = new ArrayCollection();
		
		private var keys:Dictionary = new Dictionary();
		private var countryArray:Array = new Array();
		
		private function init():void
		{
		this.consumer.subscribe();
		}
		/**
		* This filter function is used to see if the country item in the array has already had hits. 
		* If it has then we need to accumulate the hit count, otherwise we need to add it to the 
		* data provider with hit count 1.
		**/ 
		private function accumulateHits(item:Object, idx:uint, arr:Array):Boolean 
		{
		// 'keys' will contain each country code as the key and the item object (CountryVO) as the value, which 
		// contains both country and hits amount.    
		if (keys[item.country]!=null) {
		// Update the hits count for the item
		item.hits = item.hits+=1;
		return false;
		} else {
		item.hits=1; 
		keys[item.country] = item;
		feedItems.addItem(item);
		return true;
		}
		}
		
		private function messageHandler(event:MessageEvent):void  
		{  
		var country:Object = event.message.body;
		/* var co:CountryVO = new CountryVO();
		co.country=country; */
		// Add this to an array and call a filter function to check if that country has already
		// had hits detected.
		countryArray.push(country);
		//countryArray.filter(accumulateHits);
		}       		
		]]>
	</fx:Script>	
	
	<!-- The destination can be accessed using four different channels: RTMP, AMF Streaming, AMF Long Polling, AMF Polling.
	You can choose which channel(s) to use to access the destination: just comment out the channels you don't want to use.
	For example, if you don't want a dependency on fds.swc, uncomment the RTMP channel definition. The order of the channels 
	defined in the ChannelSet tag is important: The system will try to connect using the first one. If that connection fails, 
	it will fall back to the next one, etc. In real life, these URLs shouldn't be hardcoded in the application... One option 
	is to use a configuration file as described here: 
	http://coenraets.org/blog/2009/03/externalizing-service-configuration-using-blazeds-and-lcds/--> 
	
	
	<mx:VBox width="100%" height="100%">
		<mx:Legend dataProvider="{bar}"/>
		<mx:BarChart id="bar" height="70%" showDataTips="true" dataProvider="{feedItems}">
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="country"/>
			</mx:horizontalAxis>
			
			<mx:series>
				<mx:BarSeries xField="country" yField="hits" displayName="Hits per Country"/>
			</mx:series>
		</mx:BarChart>
		
		<mx:HBox>
			<mx:ColumnChart id="col" showDataTips="true" dataProvider="{feedItems}">
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="country"/>
				</mx:horizontalAxis>
				
				<mx:series>
					<mx:ColumnSeries xField="country" yField="hits"/>
				</mx:series>
			</mx:ColumnChart>
			
			<mx:Legend dataProvider="{pie}" />
			<mx:PieChart id="pie" showDataTips="true" dataProvider="{feedItems}">
				<mx:series>
					<mx:PieSeries field="hits" nameField="country" labelPosition="insideWithCallout"/>
				</mx:series>
			</mx:PieChart>
		</mx:HBox>	
	</mx:VBox>
</s:Application>
